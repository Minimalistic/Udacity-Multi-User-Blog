{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"flex",
				"flex-end"
			],
			[
				"al",
				"align-items"
			],
			[
				"shopping",
				"shopping_list_html"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import os\nimport re\nimport random\nimport hashlib\nimport hmac\nfrom string import letters\nfrom models import *\n\nimport webapp2\nimport jinja2\n\ntemplate_dir = os.path.join(os.path.dirname(__file__), 'templates')\njinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),\n                               autoescape = True)\n\nsecret = 'TheMostSecretOfSecrets'\n\ndef render_str(template, **params):\n    t = jinja_env.get_template(template)\n    return t.render(params)\n\ndef make_secure_val(val):\n    return '%s|%s' % (val, hmac.new(secret, val).hexdigest())\n\ndef check_secure_val(secure_val):\n    val = secure_val.split('|')[0]\n    if secure_val == make_secure_val(val):\n        return val\n\nclass BlogHandler(webapp2.RequestHandler):\n    def write(self, *a, **kw):\n        self.response.out.write(*a, **kw)\n\n    def render_str(self, template, **params):\n        params['user'] = self.user\n        return render_str(template, **params)\n\n    def render(self, template, **kw):\n        self.write(self.render_str(template, **kw))\n\n    def set_secure_cookie(self, name, val):\n        cookie_val = make_secure_val(val)\n        self.response.headers.add_header(\n            'Set-Cookie',\n            '%s=%s; Path=/' % (name, cookie_val))\n\n    def read_secure_cookie(self, name):\n        cookie_val = self.request.cookies.get(name)\n        return cookie_val and check_secure_val(cookie_val)\n\n    def login(self, user):\n        self.set_secure_cookie('user_id', str(user.key().id()))\n\n    def logout(self):\n        self.response.headers.add_header('Set-Cookie', 'user_id=; Path=/')\n\n    def initialize(self, *a, **kw):\n        webapp2.RequestHandler.initialize(self, *a, **kw)\n        uid = self.read_secure_cookie('user_id')\n        self.user = uid and User.by_id(int(uid))\n\ndef render_post(response, post_tool):\n    response.out.write('<b>' + post_tool.subject + '</b><br>')\n    response.out.write(post_tool.content)\n\nclass MainPage(BlogHandler): # This renders the base.html if user goes to \n    def get(self):           # the root address\n        self.render('base.html')\n\n##### user stuff\ndef make_salt(length = 5):\n    return ''.join(random.choice(letters) for x in xrange(length))\n\ndef make_pw_hash(name, pw, salt = None):\n    if not salt:\n        salt = make_salt()\n    h = hashlib.sha256(name + pw + salt).hexdigest()\n    return '%s,%s' % (salt, h)\n\ndef valid_pw(name, password, h):\n    salt = h.split(',')[0]\n    return h == make_pw_hash(name, password, salt)\n\ndef users_key(group = 'default'):\n    return db.Key.from_path('users', group)\n\n\n\n##### blog stuff\n\ndef blog_key(name = 'default'):\n    return db.Key.from_path('blogs', name)\n\nclass PostDatabase(db.Model):\n    subject = db.StringProperty(required = True)\n    content = db.TextProperty(required = True)\n    created = db.DateTimeProperty(auto_now_add = True)\n    last_modified = db.DateTimeProperty(auto_now = True)\n    user_id = db.IntegerProperty(required = True)\n\n    def fetchUserName(self):\n        user = User.by_id(self.user_id)\n        return user.name\n\n    def render(self): # renderpost is used to render jinja templates\n        self._render_text = self.content.replace('\\n', '<br>')\n        return render_str(\"post.html\", renderpost = self)\n\nclass BlogFront(BlogHandler):\n    def get(self):\n        allposts = db.GqlQuery  \\\n        (\"SELECT * FROM PostDatabase ORDER BY created DESC LIMIT 10\")\n        self.render('blog.html',    # takes the allposts db query and\n                    allposts = allposts) # renders results\n\nUSER_RE = re.compile(r\"^[a-zA-Z0-9_-]{3,20}$\")\ndef valid_username(username):\n    return username and USER_RE.match(username)\n\nPASS_RE = re.compile(r\"^.{3,20}$\")\ndef valid_password(password):\n    return password and PASS_RE.match(password)\n\nEMAIL_RE  = re.compile(r'^[\\S]+@[\\S]+\\.[\\S]+$')\ndef valid_email(email):\n    return not email or EMAIL_RE.match(email)\n\nclass PostPage(BlogHandler):\n    def get(self, post_id):\n        key = db.Key.from_path('PostDatabase', int(post_id), parent=blog_key())\n        post_tool = db.get(key)\n\n        if not post_tool:\n            self.error(404)\n            return\n\n        self.render(\"permalink.html\", post_tool = post_tool)\n\nclass EditPost(BlogHandler):\n    def get(self, post_id):\n        if self.user:\n            key = db.Key.from_path('PostDatabase', int(post_id), parent=blog_key())\n            post_tool = db.get(key)\n            # Check to see if the logged in user is the post's author\n            if post_tool.user_id == self.user.key().id(): \n                self.render(\"editpost.html\",\n                            post_tool = post_tool,\n                            subject = post_tool.subject,\n                            content = post_tool.content,\n                            post_id = post_id)\n            else:\n                self.write(\"not self.user\")\n        else: # Isn't a user, told they need to be one and offers signup\n            self.write(\"Must be a registered user.\")\n\n    def post(self, post_id):\n        subject = self.request.get('subject')\n        content = self.request.get('content')\n\n        if subject and content:\n            self.write(\"IS SUBJECT AND CONTENT\")\n        else: # In case user tries to submit an empty edit form\n            self.write(\"ELSE\")\n\nclass NewPost(BlogHandler):\n    def get(self):\n        if self.user:\n            self.render(\"newpost.html\")\n        else:\n            self.redirect(\"/login\")\n\n    def post(self):\n        if not self.user:\n            self.write(\"NOT SELF.USER\")\n\n        subject = self.request.get('subject')\n        content = self.request.get('content')\n\n        if subject and content:\n            post_tool = PostDatabase(parent = blog_key(),\n                                            user_id = self.user.key().id(),\n                                            subject = subject,\n                                            content = content)\n            post_tool.put()\n            self.redirect('/blog/%s' % str(post_tool.key().id()))\n        else:\n            error = \"subject and content, please!\"\n            self.render(\"newpost.html\",\n                        subject = subject,\n                        content = content,\n                        error = error)\n\nclass Signup(BlogHandler):\n    def get(self):\n        self.render(\"signup-form.html\")\n\n    def post(self):\n        have_error = False\n        self.username = self.request.get('username')\n        self.password = self.request.get('password')\n        self.verify = self.request.get('verify')\n        self.email = self.request.get('email')\n\n        params = dict(username = self.username,\n                      email = self.email)\n\n        if not valid_username(self.username):\n            params['error_username'] = \"That's not a valid username.\"\n            have_error = True\n\n        if not valid_password(self.password):\n            params['error_password'] = \"That wasn't a valid password.\"\n            have_error = True\n            \n        elif self.password != self.verify:\n            params['error_verify'] = \"Your passwords didn't match.\"\n            have_error = True\n\n        if not valid_email(self.email):\n            params['error_email'] = \"That's not a valid email.\"\n            have_error = True\n\n        if have_error:\n            self.render('signup-form.html', **params)\n        else:\n            self.done()\n\n    def done(self, *a, **kw):\n        raise NotImplementedError\n\nclass Register(Signup):\n    def done(self):\n        #make sure the user doesn't already exist\n        u = User.by_name(self.username)\n        if u:\n            msg = 'That user already exists.'\n            self.render('signup-form.html', error_username = msg)\n        else:\n            u = User.register(self.username, self.password, self.email)\n            u.put()\n\n            self.login(u)\n            self.redirect('/welcome')\n\nclass Login(BlogHandler):\n    def get(self):\n        self.render('login-form.html')\n\n    def post(self):\n        username = self.request.get('username')\n        password = self.request.get('password')\n\n        u = User.login(username, password)\n        if u:\n            self.login(u)\n            self.redirect('/welcome')\n        else:\n            msg = 'Invalid login'\n            self.render('login-form.html', error = msg)\n\nclass Logout(BlogHandler):\n    def get(self):\n        self.logout()\n        self.redirect('/blog')\n\nclass WelcomeUser(BlogHandler):\n    def get(self):\n        if self.user:\n            self.render('welcome.html', username = self.user.name)\n        else:\n            self.redirect('/signup')\n\nclass Delete(BlogHandler):\n    \n    def post(self,post_id):\n        if self.user:\n            key = db.Key.from_path('PostDatabase', int(post_id), parent=blog_key())\n            post_tool = db.get(key)\n            db.delete(key)\n            self.redirect('/blog')\n\n        else:\n            self.redirect('/blog')\n\nclass Comment(db.Model):\n    comment = db.StringProperty(required=True)\n    post = db.ReferenceProperty(PostDatabase)\n    user = db.ReferenceProperty(User)\n\n\nclass NewComment(BlogHandler):\n\n    def get(self,post_id):\n\n        if not self.user:\n            return self.redirect(\"/login\")\n        key = db.Key.from_path(\"PostDatabase\", int(post_id), parent=blog_key())\n        post_tool = db.get(key)\n        \n        subject = post.subject\n        content = post.content\n        self.render(\n            \"newcomment.html\",\n            subject=subject,\n            content=content,\n            post=post.key(),\n            user=self.user.key(),\n            )\n\n    def post(self,post_id):\n        if self.user:\n            key = db.Key.from_path(\"PostDatabase\", int(post_id), parent=blog_key())\n            post_tool = db.get(key)\n            if not post:\n                self.error(404)\n                return\n            if not self.user:\n                return self.redirect(\"login\")\n            comment = self.request.get(\"comment\")\n\n            if comment:\n                # check how author was defined\n            \n                c = Comment(comment=comment,user = self.user.key(),post=post.key())\n                c.put()\n                self.redirect(\"/blog/%s\" % str(post.key().id()))\n\n            else:\n                error = \"please comment\"\n                self.render(\n                        \"permalink.html\",\n                    post=post,\n                    content=content,\n                    error=error)\n        else:\n            self.redirect(\"/login\")\n\napp = webapp2.WSGIApplication([('/', MainPage),\n                               ('/blog/?', BlogFront),\n                               ('/blog/([0-9]+)', PostPage),\n                               ('/blog/newpost', NewPost),\n                               ('/blog/editpost/([0-9]+)', EditPost),\n                               ('/blog/delete/([0-9]+)', Delete),\n                               ('/signup', Register),\n                               ('/login', Login),\n                               ('/logout', Logout),\n                               ('/welcome', WelcomeUser),\n                               ('/blog/newcomment/([0-9]+)', NewComment),\n                               ],\n                              debug=True)\n",
			"file": "marshblog.py",
			"file_size": 11923,
			"file_write_time": 131264741900000000,
			"settings":
			{
				"buffer_size": 11157,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models.py",
			"settings":
			{
				"buffer_size": 37,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/base.html",
			"settings":
			{
				"buffer_size": 663,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/blog.html",
			"settings":
			{
				"buffer_size": 241,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/editpost.html",
			"settings":
			{
				"buffer_size": 385,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/login-form.html",
			"settings":
			{
				"buffer_size": 647,
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/newpost.html",
			"settings":
			{
				"buffer_size": 559,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/permalink.html",
			"settings":
			{
				"buffer_size": 174,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/post.html",
			"settings":
			{
				"buffer_size": 494,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/signup-form.html",
			"settings":
			{
				"buffer_size": 1292,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "templates/welcome.html",
			"settings":
			{
				"buffer_size": 220,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "static/main.css",
			"settings":
			{
				"buffer_size": 1788,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "app.yaml",
			"settings":
			{
				"buffer_size": 209,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 331.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"install",
				"Colorsublime: Install Theme"
			],
			[
				"colo",
				"Colorsublime: Install Theme"
			],
			[
				"",
				"Colorsublime: Install Theme"
			],
			[
				"co",
				"Colorsublime: Install Theme"
			],
			[
				"orig",
				"Package Control: Install Package"
			],
			[
				"alig",
				"Package Control: Install Package"
			],
			[
				"color",
				"Colorsublime: Install Theme"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"Package Control: Install Package",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start"
	],
	"file_history":
	[
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/models.py",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/myauth.py",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/templates/post.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/templates/signup.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/templates/logout.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/templates/login.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/marshproject.py",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/stylesheets/main.css",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/app.yaml",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/templates/welcome.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/templates/newpost.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/templates/blog.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-start/templates/base.html",
		"/Users/jasonmarsh/Downloads/hw4/app.yaml",
		"/Users/jasonmarsh/Downloads/hw4/templates/welcome.html",
		"/Users/jasonmarsh/Downloads/hw4/templates/signup-form.html",
		"/Users/jasonmarsh/Downloads/hw4/templates/post.html",
		"/Users/jasonmarsh/Downloads/hw4/templates/rot13-form.html",
		"/Users/jasonmarsh/Downloads/hw4/templates/permalink.html",
		"/Users/jasonmarsh/Downloads/hw4/templates/newpost.html",
		"/Users/jasonmarsh/Downloads/hw4/templates/login-form.html",
		"/Users/jasonmarsh/Downloads/hw4/templates/front.html",
		"/Users/jasonmarsh/Downloads/hw4/templates/base.html",
		"/Users/jasonmarsh/Downloads/hw4/static/main.css",
		"/Users/jasonmarsh/Downloads/hw4/blog.py",
		"/Users/jasonmarsh/Downloads/hw4/index.yaml",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/app.yaml",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/static/main.css",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/welcome.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/signup-form.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/post.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/permalink.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/newpost.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/login-form.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/front.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/base.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/blog.py",
		"/Users/jasonmarsh/GitHub/udacity-basicblog-reverse/templates/rot13-form.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog/templates/newpost.html",
		"/Users/jasonmarsh/GitHub/udacity-basicblog/basicblog.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/stylesheets/main.css",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/templates/post.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/templates/newpost.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/templates/blog.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/basicblog.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/templates/stylesheets/main.css",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/templates/css/main.css",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ProjectPortfolio/css/main.css",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/basicblog/templates/main.css",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/asciichan/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/asciichan/asciichan.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/asciichan/templates/front.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/user_signup/user_signup.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/user_signup/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/user_signup/templates/welcome.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/user_signup/templates/signup_form.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/user_signup/templates/signup-form.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/user_signup/index.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Start_user_pw/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Start_user_pw/play.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/my_rot13/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/rot13_hw/hw2/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/my_rot13/rot13.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/rot13_hw/hw2/rot13.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/rot13_hw/hw2/templates/rot13_form.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/rot13_hw/hw2/index.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/rot13_hw/hw2/templates/rot13-form.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/rot13_hw/hw2/blog.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Templates_start/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Templates_start/templates.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Rot13_attempt/untitled.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Templates_start/templates/shoppingList.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Templates_start/templates/rot13.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Rot13_attempt/templates/hello_form.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Rot13_attempt/app.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Hello_World_continued/play.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/start_over_hello_world_2/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/start_over_hello_world_2/play.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Start_Over_Hello_World/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Start_Over_Hello_World/start_over_hello_world_2/play.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Start_Over_Hello_World/main_test.py",
		"/Users/jasonmarsh/Library/Application Support/Sublime Text 3/Packages/User/Origami.sublime-settings",
		"/Users/jasonmarsh/Library/Application Support/Sublime Text 3/Packages/Origami/Origami.sublime-settings",
		"/Users/jasonmarsh/Library/Application Support/Sublime Text 3/Packages/Colorsublime/Colorsublime.sublime-settings",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/Start_Over/play.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/tutorials/hello_world/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/tutorials/hello_world/main_test.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/tutorials/hello_world/main.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_test/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_test/templates/rot13.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_test/templates.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_T/templates/rot13.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_learn/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_T/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_T/rot13.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_T/templates.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13/templates/rot13.html",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13/templates.py",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13/app.yaml",
		"/Users/jasonmarsh/Dropbox/Documents/Coding/Udacity/ROT13_Template_Refactor.zip"
	],
	"find":
	{
		"height": 44.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"render_str",
			"cookie_val",
			"check_secure_val",
			"hash",
			"make_pw_hash",
			"model",
			"edit",
			"perm",
			"welcome",
			"user_id",
			".key().id()",
			"self.user",
			"self.use",
			"self.user.key",
			"user_id",
			"db.get",
			"if u",
			"self.user",
			"User",
			"register",
			"user",
			"username",
			"users_key",
			"users",
			"params",
			"user",
			"id",
			".get",
			"get",
			"User",
			"newpost",
			"newposter",
			"post",
			"newpost",
			"post",
			"text",
			"edit",
			"Content",
			"post",
			"Content",
			"render_front",
			"content",
			"CONTENTS",
			"render",
			"self",
			"Post",
			"content",
			"p",
			"SignUp",
			"size",
			"cs",
			"subject",
			"Content",
			"posts",
			"gql",
			"content",
			"posts",
			"Post",
			"gql",
			"order by",
			"10",
			"front",
			"Form",
			"contents",
			"content",
			"contents",
			"handler",
			"newpost",
			"datetime",
			"created",
			"date",
			"blog",
			"red",
			";\n",
			"Content",
			"/blog",
			"subject",
			"title",
			"TITLE",
			"entry",
			"art",
			"arts",
			"blog",
			"html",
			"arts",
			"title",
			"\tdef post(self):",
			"subject",
			"title",
			"arts",
			"contents",
			"Art",
			"title",
			"800px",
			"blog",
			"newpost",
			"post",
			"front",
			"MainPage",
			"front",
			"ascii",
			"blog",
			"pass",
			"email",
			"have_error",
			"string",
			"signup",
			"-form",
			"unit",
			"blog",
			"rot13-form",
			"template",
			"render_str",
			"t",
			"write",
			"self.write",
			"template_dir",
			"str",
			"template",
			"text",
			"render",
			"template_dir",
			"base",
			"return",
			"write",
			"self.write",
			"n",
			"form_html"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"post_tool",
			"subject"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "marshblog.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11157,
						"regions":
						{
						},
						"selection":
						[
							[
								2550,
								2550
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"rulers":
							[
								80
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1068.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37,
						"regions":
						{
						},
						"selection":
						[
							[
								37,
								37
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "templates/base.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 663,
						"regions":
						{
						},
						"selection":
						[
							[
								490,
								491
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "templates/blog.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 241,
						"regions":
						{
						},
						"selection":
						[
							[
								25,
								25
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "templates/editpost.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 385,
						"regions":
						{
						},
						"selection":
						[
							[
								88,
								88
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "templates/login-form.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 647,
						"regions":
						{
						},
						"selection":
						[
							[
								100,
								104
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "templates/newpost.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 559,
						"regions":
						{
						},
						"selection":
						[
							[
								196,
								200
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "templates/permalink.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 174,
						"regions":
						{
						},
						"selection":
						[
							[
								25,
								25
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "templates/post.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 494,
						"regions":
						{
						},
						"selection":
						[
							[
								308,
								308
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "templates/signup-form.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1292,
						"regions":
						{
						},
						"selection":
						[
							[
								81,
								87
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "templates/welcome.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 220,
						"regions":
						{
						},
						"selection":
						[
							[
								86,
								86
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 11,
					"file": "static/main.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1788,
						"regions":
						{
						},
						"selection":
						[
							[
								392,
								419
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 12,
					"file": "app.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 209,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/YAML/YAML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				0,
				1,
				2,
				2
			],
			[
				1,
				0,
				3,
				1
			],
			[
				2,
				1,
				3,
				2
			]
		],
		"cols":
		[
			0.0,
			0.62149587089,
			0.687198893229,
			1.0
		],
		"rows":
		[
			0.0,
			0.572114461412,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "marshblog.sublime-project",
	"replace":
	{
		"height": 82.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"main.css",
				"ProjectPortfolio/css/main.css"
			],
			[
				"blog.html",
				"basicblog/templates/blog.html"
			],
			[
				"",
				"asciichan/templates/front.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 260.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
